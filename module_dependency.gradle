import groovy.json.JsonSlurper

// 应用该文件的时候，执行该方法
includeAndSwitchModuleDep()

def includeAndSwitchModuleDep() {
    try {
        // module依赖的配置信息文件路径，json格式
        def moduleDepConfigDir = "module_dependency.json"
        // 解析json配置
        def json = file(moduleDepConfigDir).getText()
        def jsonSlurper = new JsonSlurper()
        def obj = jsonSlurper.parseText(json)
        println "obj=$obj"
        // 遍历配置信息列表，找出 useModule==true 的模块，动态include
        if (obj.useModuleAll){
            obj.list.forEach{
                include ":${it.module_name}"
                project(":${it.module_name}").projectDir = file(it.module_dir)
            }
        }else {
            obj.list.forEach{
                if (it.useModule) {
                    include ":${it.module_name}"
                    project(":${it.module_name}").projectDir = file(it.module_dir)
                }
            }
        }
        // aar依赖 与 module依赖 动态切换
        switchToModuleDependency(obj)
    } catch (Exception e) {
        e.printStackTrace()
    }
}

def switchToModuleDependency(Object moduleDepObj){
    // projectsEvaluated方法是所有module构建完成后执行的回调
    gradle.projectsEvaluated {
        gradle.rootProject.subprojects {
            println "project name is $it"

            project.configurations.all { Configuration ->
                resolutionStrategy {
                    dependencySubstitution {
                        if (moduleDepObj.useModuleAll){
                            moduleDepObj.list.forEach {
                                substitute module(it.module_group) with project(":${it.module_name}")
                            }
                        }else {
                            moduleDepObj.list.forEach {
                                if (it.useModule) {
                                    substitute module(it.module_group) with project(":${it.module_name}")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

